/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import controle.ControleArray;
import gerararray.GerarArray;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ordenacao.Heap;
import ordenacao.Ordenacao;

/**
 *
 * @author jean
 */
public class PrincipalGui extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public PrincipalGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonLimpar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaArrayOrdened = new javax.swing.JTextArea();
        jLabelRelat = new javax.swing.JLabel();
        jLabelMetOrdenacao = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaArray = new javax.swing.JTextArea();
        jComboBoxOrdenacao = new javax.swing.JComboBox<String>();
        jButtonAleatorio = new javax.swing.JButton();
        jButtonDecrescente = new javax.swing.JButton();
        jButtonCrescente = new javax.swing.JButton();
        jButtonOrdenar = new javax.swing.JButton();
        jFormattedTextFieldTamArray = new javax.swing.JFormattedTextField();
        jLabelTamArray = new javax.swing.JLabel();
        jFormattedTextFieldRept = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Métodos de ordenação");

        jPanel1.setAutoscrolls(true);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Método", "Quantidade", "nanosegundo", "microsegundo", "milisegundo", "segundo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(jTable2);

        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jTextAreaArrayOrdened.setEditable(false);
        jScrollPane3.setViewportView(jTextAreaArrayOrdened);

        jLabelRelat.setText("Relatório de tempo dos métodos de ordenação");

        jLabelMetOrdenacao.setText("Método de ordenação");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Método", "Quantidade", "nanosegundo", "microsegundo", "milisegundo", "segundo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("Média de tempo dos métodos de ordenação");

        jScrollPane1.setViewportView(jTextAreaArray);

        jComboBoxOrdenacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bubble Sort (versão original sem melhorias)", "Bubble Sort melhorado (verifica se o vetor já está ordenado)", "Quick Sort (com pivô sendo o primeiro elemento da lista – partição)", "Quick Sort (com pivô sendo o elemento central da lista – partição)", "Insertion Sort (inserção simples ou inserção direta)", "Shell Sort", "Selection Sort (Seleção Direta)", "Heap Sort", "Merge Sort" }));
        jComboBoxOrdenacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenacaoActionPerformed(evt);
            }
        });

        jButtonAleatorio.setText("aleatório");
        jButtonAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAleatorioActionPerformed(evt);
            }
        });

        jButtonDecrescente.setText("decrescente");
        jButtonDecrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecrescenteActionPerformed(evt);
            }
        });

        jButtonCrescente.setText("crescente");
        jButtonCrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrescenteActionPerformed(evt);
            }
        });

        jButtonOrdenar.setText("ordenar");
        jButtonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenarActionPerformed(evt);
            }
        });

        jFormattedTextFieldTamArray.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextFieldTamArray.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabelTamArray.setText("Gerar array de tamanho");

        jFormattedTextFieldRept.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextFieldRept.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFieldRept.setText("1");

        jLabel2.setText("Número de repetição");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCrescente, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDecrescente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(75, 75, 75)
                                .addComponent(jFormattedTextFieldRept, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jComboBoxOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelMetOrdenacao)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabelTamArray)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jFormattedTextFieldTamArray, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(28, 28, 28)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelRelat, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 114, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonLimpar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonOrdenar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabelMetOrdenacao)
                .addGap(27, 27, 27)
                .addComponent(jComboBoxOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelTamArray)
                    .addComponent(jFormattedTextFieldTamArray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldRept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonAleatorio)
                    .addComponent(jButtonCrescente)
                    .addComponent(jButtonDecrescente))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(jLabelRelat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOrdenar)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonLimpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane5.setViewportView(jPanel1);

        jMenu2.setText("Relatório");

        jMenuItem1.setText("Gráfico");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAleatorioActionPerformed
        // TODO add your handling code here:

        if (!jFormattedTextFieldTamArray.getText().isEmpty()) {

            int size = Integer.parseInt(jFormattedTextFieldTamArray.getText());

            if (size > 0) {
                jTextAreaArray.setText(GerarArray.aleatorio(size));
            } else {
                JOptionPane.showMessageDialog(this, "Entre com o tamanho do array maior que zero");
            }
        }
    }//GEN-LAST:event_jButtonAleatorioActionPerformed

    private void jButtonCrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrescenteActionPerformed
        // TODO add your handling code here:
        if (!jFormattedTextFieldTamArray.getText().isEmpty()) {

            int size = Integer.parseInt(jFormattedTextFieldTamArray.getText());

            if (size > 0) {
                jTextAreaArray.setText(GerarArray.crescente(size));
            } else {
                JOptionPane.showMessageDialog(this, "Entre com o tamanho do array maior que zero");
            }
        }
    }//GEN-LAST:event_jButtonCrescenteActionPerformed

    private void jButtonDecrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecrescenteActionPerformed
        // TODO add your handling code here:
        if (!jFormattedTextFieldTamArray.getText().isEmpty()) {

            int size = Integer.parseInt(jFormattedTextFieldTamArray.getText());

            if (size > 0) {
                jTextAreaArray.setText(GerarArray.decrescente(size));
            } else {
                JOptionPane.showMessageDialog(this, "Entre com o tamanho do array maior que zero");
            }
        }
    }//GEN-LAST:event_jButtonDecrescenteActionPerformed

    private void jButtonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenarActionPerformed
        // TODO add your handling code here:

    int numRep = Integer.parseInt(jFormattedTextFieldRept.getText());
    
    if (numRep < 1) {
        numRep = 1;
        jFormattedTextFieldRept.setText("1");
    }
    
    for (int i = 0; i < numRep; i++) {
        setTextAreaInArray();
        Long initTime, endTime;
        switch (jComboBoxOrdenacao.getSelectedItem().toString()) {

            case "Bubble Sort (versão original sem melhorias)":
                initTime = System.nanoTime();
                Ordenacao.bublleSort(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Bubble Sort", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Bubble Sort melhorado (verifica se o vetor já está ordenado)":
                initTime = System.nanoTime();
                Ordenacao.bublleSortMelhorado(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Bubble Sort Melhorado", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Quick Sort (com pivô sendo o primeiro elemento da lista – partição)":
                initTime = System.nanoTime();
                Ordenacao.quickSort2(ControleArray.getArray(), 0, ControleArray.getArray().length - 1);
                endTime = System.nanoTime();
                setTableTempo("Quick Sort,Pivo Inicial", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Quick Sort (com pivô sendo o elemento central da lista – partição)":
                initTime = System.nanoTime();
                Ordenacao.quickSort(ControleArray.getArray(), 0, ControleArray.getArray().length - 1);
                endTime = System.nanoTime();
                setTableTempo("Quick Sort,Pivo Central", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Insertion Sort (inserção simples ou inserção direta)":
                initTime = System.nanoTime();
                Ordenacao.insertionSort(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Insertion Sort", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Shell Sort":
                initTime = System.nanoTime();
                Ordenacao.shellSort(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Shell Sort", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Selection Sort (Seleção Direta)":
                initTime = System.nanoTime();
                Ordenacao.selectionSort(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Selection Sort", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Heap Sort":

                Heap heap = new Heap(ControleArray.getArray());

                initTime = System.nanoTime();
                Ordenacao.heapSort(ControleArray.getArray());
                endTime = System.nanoTime();
                setTableTempo("Heap Sort", ControleArray.getArray().length, initTime, endTime);
                break;

            case "Merge Sort":

                initTime = System.nanoTime();
                Ordenacao.mergeSort(ControleArray.getArray(), 0, ControleArray.getArray().length - 1);
                endTime = System.nanoTime();
                setTableTempo("Merge Sort", ControleArray.getArray().length, initTime, endTime);

                break;

            }
            setTableTempoMedia();
            setArrayInTextArea();
        }
    }//GEN-LAST:event_jButtonOrdenarActionPerformed

    private void jComboBoxOrdenacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOrdenacaoActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        // TODO add your handling code here:
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();

        while (defaultTableModel.getRowCount() > 0) {
            defaultTableModel.removeRow(0);
        }

        defaultTableModel = (DefaultTableModel) jTable2.getModel();

        while (defaultTableModel.getRowCount() > 0) {
            defaultTableModel.removeRow(0);
        }
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        GraficoGui grafico = new GraficoGui();
        grafico.criaGrafico(jTable2);
        grafico.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void setArrayInTextArea() {

        Integer[] array = ControleArray.getArray();

        jTextAreaArrayOrdened.setText("");

        for (Integer array1 : array) {
            jTextAreaArrayOrdened.append(array1.toString() + "\n");
        }

    }

    public void setTextAreaInArray() {

        StringTokenizer stringTokenizer = new StringTokenizer(jTextAreaArray.getText(), "\r\n ");
        Integer[] array = new Integer[stringTokenizer.countTokens()];
        int i = 0;
        while (stringTokenizer.hasMoreTokens()) {
            array[i++] = Integer.parseInt(stringTokenizer.nextToken());
        }

        ControleArray.setArray(array);
    }

    public void setTableTempo(String stringMet, int quant, long initTime, long endTime) {

        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();

        String[] strings = new String[6];

        strings[0] = stringMet;
        strings[1] = Integer.toString(quant);
        strings[2] = Long.toString(endTime - initTime);
        strings[3] = Long.toString((long) ((endTime - initTime) * Math.pow(10, -3)));
        strings[4] = Long.toString((long) ((endTime - initTime) * Math.pow(10, -6)));
        strings[5] = Long.toString((long) ((endTime - initTime) * Math.pow(10, -9)));

        defaultTableModel.addRow(strings);
    }

    public void setTableTempoMedia() {

        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel defaultTableModel2 = (DefaultTableModel) jTable2.getModel();

        while (defaultTableModel2.getRowCount() > 0) {
            defaultTableModel2.removeRow(0);
        }

        for (int i = 0; i < defaultTableModel.getRowCount(); i++) {

            int cont = 0;
            double time = 0;
            int k = 0, l = i;
            boolean flag = true;

            while (l < defaultTableModel.getRowCount() && flag) {
                while (k < defaultTableModel2.getRowCount() && flag) {
                    if (defaultTableModel.getValueAt(l, 0).equals(defaultTableModel2.getValueAt(k, 0)) && defaultTableModel.getValueAt(l, 1).equals(defaultTableModel2.getValueAt(k, 1))) {
                        flag = false;
                    } else {
                        k++;
                    }
                }
                l++;
            }

            if (flag) {

                for (int j = i; j < defaultTableModel.getRowCount(); j++) {

                    if (defaultTableModel.getValueAt(i, 0).equals(defaultTableModel.getValueAt(j, 0)) && defaultTableModel.getValueAt(i, 1).equals(defaultTableModel.getValueAt(j, 1))) {
                        cont++;
                        time += Double.parseDouble((String) defaultTableModel.getValueAt(j, 2));
                    }

                }

                time /= cont;

                String[] strings = new String[6];

                strings[0] = (String) defaultTableModel.getValueAt(i, 0);
                strings[1] = (String) defaultTableModel.getValueAt(i, 1);
                strings[2] = Long.toString((long) time);
                strings[3] = Long.toString((long) (time * Math.pow(10, -3)));
                strings[4] = Long.toString((long) (time * Math.pow(10, -6)));
                strings[5] = Long.toString((long) (time * Math.pow(10, -9)));

                defaultTableModel2.addRow(strings);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAleatorio;
    private javax.swing.JButton jButtonCrescente;
    private javax.swing.JButton jButtonDecrescente;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonOrdenar;
    private javax.swing.JComboBox<String> jComboBoxOrdenacao;
    private javax.swing.JFormattedTextField jFormattedTextFieldRept;
    private javax.swing.JFormattedTextField jFormattedTextFieldTamArray;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelMetOrdenacao;
    private javax.swing.JLabel jLabelRelat;
    private javax.swing.JLabel jLabelTamArray;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextAreaArray;
    private javax.swing.JTextArea jTextAreaArrayOrdened;
    // End of variables declaration//GEN-END:variables
}
